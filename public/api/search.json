[{"id":"326c974c2dd33a5c1c93eb6f0ddf6329","title":"git分支部分教程","content":"\n得先说明，这些东西都是写给我自己看的用于梳理自己的思路，以及之后复习用所以某些地方写的不是很清楚\n\n0.git分支特性简介git的分支模型具有轻量的特点，支持在工作流程中频繁地使用分支和合并，这使得它在一众版本控制系统中脱颖而出git保存数据的方式：保存某一时刻的快照\n1.git提交对象与分支1.1 提交对象概念与新建提交对象git add .git commit -m &quot;some changes&quot;\n第一条指令将根目录的文件全部存储在暂存区（可以理解为缓冲区），方便之后的commit提交第二条将指令将暂存区里的文件提交到分支上，这一步，git做了以下的操作：\n\nblob对象，指向每个提交的文件，保存者该文件的当前快照和哈希值\n快照，相当于给文件存了个档，记录了当前文件的状态\n哈希值，方便git检测文件是否改变\n\n\n树对象，指向blob对象的索引，记录着文件结构\n提交对象，指向树对象，同时包含着提交的信息\n\n上面对象的包含关系呈现如下：\n\n提交对象\n树对象\nblob对象\nblob对象\nblob对象\n\n\n\n\n\n这样，一个提交对象就形成了，不同提交对象之间的关系呈现如下提交对象1 &lt;- 提交对象2 &lt;- 提交对象3\n1.2 分支概念与新建分支git的分支，本质上是指向不同提交对象的指针，git的默认分支为master使用git branch demo会在当前提交对象上新建demo分支这样，我们就有两个分支，master与demo，它们都指向同一个提交对象\n那么，两个分支指向同一个提交对象，git是如何确定当前是在那个分支上的呢那就是Head头指针，它没有特殊的含义，只是标识当前位于哪个分支上（可以理解当前的工作路径）\n可以使用git log --oneline --decorate查看分支指向的提交对象\n1.3 分支切换git checkout demo这条命令将head指针切换到demo分支上此时再新建提交对象，提交对象就会在当前head指针所在的分支上创建同时将head指针移动到新建的对象上\n1.4 查看提交对象结构git log --oneline --decorate --graph --all显示提交对象的结构，以及各个分支指向的地方\n2.git分支的合并git中的分支合并有两种类型\n2.1 快进合并如果main分支所在的提交对象是demo分支的父对象git checkout maingit merge demogit所做的就是直接将main分支移动到demo分支所在的位置\n2.2 融合合并main分支不是demo分支的父提交对象此时融合就是将两个提交对象融合到一起，形成一个新的提交对象并且将分支移动到新的提交对象上\n此时，如果两个提交对象的内容有冲突，git就会要求你处理冲突冲突处理完毕后才能真正新建提交对象\n3.git分支的管理3.1 检查分支状态git branch查看当前有哪些分支，可以添加参数-v查看详细内容git branch --merged查看与当前分支合并了的分支git branch --no-merged查看未与当前分支合并的分支\n3.2 常见的分支开发工作流\n长期分支\n提交对象实际上应该是线性的\n分为main、develop、top三个分支\n每个分支由一个分支指针控制\n\n\n主题分支\n不同的分支由主干分支上生发出来，提交对象是树状的\n可以有多个不同的分支\n\n\n\n长期分支和主题分支可以同时进行，可以将长期分支的main、develop、top分支当成主题分支的主干\n3.3 远程分支常见交互远程分支的命令\n\ngit remote add 远程服务器名 url添加git源，并为其命名\ngit pull origin main将远程分支拉取到当前分支\n这条命令相当于git fetch origin main+git merge origin main\n先拉取，在融合（解决冲突）\n\n\ngit push origin main将当前分支推送到远程分支\n如果本地与远程分支冲突，会推送失败\n这种情况要先拉取解决冲突，再推送\n\n\ngit branch -u origin main将当前分支与远程分支绑定\n绑定并不会实时跟踪远程分支的状态\n只是起到简化代码的作用，如git push origin main简化为git push\n\n\ngit checkout -b demo origin/demo在远程分支的地方创建一个本地分支，并将两者绑定\n捷径：git checkout --track origin/main\n或：git checkout main，直接追踪远程得到main分支\n\n\ngit push origin --delete main删除一个远程分支\ngit remote -v查看远程git源列表\n\n","slug":"git教程","date":"2025-10-16T14:46:06.000Z","categories_index":"","tags_index":"tutorial","author_index":"猫冰"},{"id":"79fe4e631ac71a379c3a62ac37d71308","title":"个人博客建站教程","content":"\n这是一个建站基础教程，主要是为了熟悉流程，更多需要技术个性化的东西之后再详细学习\n\n索引\n准备工作\n安装nodejs\nhexo生成框架\n部署上线\n修改域名\n问题指南\n补充知识点\n\n0.建站之前需要准备的（windows环境下）\nwindows下的linux环境（方便网站管理）-&gt; wsl教程\n网站数据托管github（方便存储网站内容）\n博客框架hexo（方便网站内容管理）\n网站部署netlify（可以直接通过github库部署）\n网站加速Cloudflare（提供国内的CDN加速）\n\n1.linux下配置必要的工具 使用wsl在windows下建立一个linux环境，我这里选择的是ubuntu版本\n接下来，下载nodejs，它自带npm包管理软件sudo apt install nodejs\n安装完成后检查安装情况node -vnpm -v出现版本提示就算安装成功\n同时记得修改以下npm的安装源，因为默认源在国内很慢\n12npm config set registry https://registry.npm.taobao.org #设置为淘宝源npm config get registry #查看更新完成后的源\n\n\n补充#1：什么是nodejs?nodejs（我自己的理解，可能不准确）\n\n是一个基于chrome V8引擎开发的C++程序\n可以简单的理解为Javascript的运行环境，是一个编译器\nnodejs让Javascript能在前后端都运行npm\n是基于nodejs衍生出来的\n一个Js包管理工具，相当于是下载JS包的app store\n\n2.使用hexo生成博客框架 使用npm安装hexo框架npm install hexo-cli -g # 全局安装hexo命令行工具\n安装好后，切换到对应的文件夹，使用hexo init &quot;项目名&quot;生成一个新的hexo框架\n框架生成完成后，要格外关注项目里面的这几个文件(夹)\n\n_config.yml（重点关注）\n为全局配置文件，网站的很多信息都在这里配置，比如说网站名称，副标题，描述，作者，语言，主题等等。具体可以参考官方文档：https://hexo.io/zh-cn/docs/configuration.html。\n\n\nscaffolds\n骨架文件，是生成新页面或者新博客的模版。可以根据需求编辑，当hexo生成新博客的时候，会用这里面的模版进行初始化。\n\n\nsource\n这个文件夹下面存放的是网站的资源，包括\n_posts：存放网站的帖子，也就是.md文件\n_drafts：存放网站的草稿\n\n\nthemes\n网站主题目录，hexo有非常丰富的主题支持，主题目录会存放在这个目录下面。\n我们后续会以默认主题来演示，更多的主题参见：https://hexo.io/themes/\n\n\n\nhexo new post &quot;MyBlog.md&quot;hexo generatehexo server三条指令合在一起的意思是，新建MyBlog.md这个帖子，生成静态文件，最后在本地运行服务器\n\n发布以及编辑博客的教程在官网有详细的说明\n生成静态文件，可以理解为C编译器将C语言编译为机器语言的过程，hexo将内容编译成浏览器看得懂的HTML CSS JS文件\n在本地运行服务器，可以用作本地调试用，编辑完后看看网站的效果\n\n3.使用netlify将网站部署上线将代码上传到github上，netlify可以直接导入只给出操作，命令说明见：git教程\n1234567git remote add origin &quot;git仓库链接&quot;git branch -M maingit add .git commit -m &quot;生成了我的第一个博客&quot;git push -u origin main#输入用户名和密码\n\n将代码推送到github后，就可以使用netlify部署了登录netlify后，从github导入项目，再配置网站\n此时，网站已经部署上线，可以通过netlify中给出的网址访问\n4.给网站分配域名\n在域名管理网站购买域名，这里拿阿里云举例\n在netlify的管理域名处添加域名（也可以使用cloudflare添加域名）\n在阿里云将域名的DNS服务器指向改为netlify的\n域名分配成功\n\n具体解释见后文的域名工作原理\n999.问题指南1.使用hexo server时，nodejs与hexo的版本不适配问题当时使用hexo server时，报错\n12Error [ERR_REQUIRE_ESM]: require() of ES Module /home/catice/tw/node_modules/strip-ansi/index.js from /home/catice/tw/node_modules/hexo/dist/plugins/console/list/common.js not supported.Instead change the require of index.js in /home/catice/tw/node_modules/hexo/dist/plugins/console/list/common.js to a dynamic import() which is available in all CommonJS modules.\n同时使用npm install安装兼容时，提示\n12345npm WARN EBADENGINE Unsupported engine &#123;npm WARN EBADENGINE   package: &#x27;hexo@8.0.0&#x27;,npm WARN EBADENGINE   required: &#123; node: &#x27;&gt;=20.19.0&#x27; &#125;,npm WARN EBADENGINE   current: &#123; node: &#x27;v18.19.1&#x27;, npm: &#x27;9.2.0&#x27; &#125;npm WARN EBADENGINE &#125;\n\n问题分析看到第二个提示再结合第一个，很明显是版本不兼容的问题，nodejs版本太低此时我尝试更新nodejs，使用apt upgrade nodejs，但发现已经是最新版本我又尝试给apt在/etc/apt/sources.list里换源，使用apt upgrade刷新但发现还是最新版，最后不得不安装低版本的hexo来兼容\n12345678# 卸载当前 hexonpm uninstall hexo# 清除 npm 缓存npm cache clean --force# 安装兼容的 Hexo 版本npm install hexo@7.2.0 --save\n\n2.github登录不上github从2021年8月13日，开始要求使用 token 进行命令行 Git 操作\n需要在github-&gt;我的头像-&gt;settings-&gt;developer settings-&gt;personal access token-&gt;tokens(classic)-&gt;generate new token(classic)使用生成的token登录\n3.apt下载慢使用cat /etc/apt/sources.list查看下载源若使用的是apt官方的下载源，则需换源，因为慢\n在/etc/apt/sources.list设置源\n1234deb https://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiversedeb https://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiversedeb https://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiversedeb https://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse\n使用apt update从源下载包列表，换源成功\n1000.补充知识点域名工作原理建网站的域名管理流程如下\n\n你想去一个地方（输入域名）\n让你的智能助手（递归解析器）去查\n递归DNS解析器是：网络服务提供商（如电信、联通）或公共DNS服务商（如阿里云的223.5.5.5、谷歌的8.8.8.8）\n\n\n助手先问全球总机（根服务器）\n根服务器：是公共的，知道管理.com，.net的顶级域服务器的地址\n\n\n总机让它去问市规划局（顶级域服务器）\n顶级域服务器：知道权威域名服务器的地址\n\n\n市规划局让它去问片区物业总公司（权威域名服务器）\n权威域名服务器：如阿里云、netlify、cloudflare\n\n\n物业总公司给出了精确的门牌号（IP地址）\n助手带你精准抵达（访问网站）\n\n更改DNS解析的流程如下\n\n你提出更改物业（权威域名服务器）的请求\n让原物业找到房产管理总局（顶级域服务器）\n只能先找（权威域名服务器）更改\n不能直接在（顶级域服务器）更改\n\n\n在房产管理总局更改房子的物业（另外一个权威域名服务器）netlify在管理域名时，要求在域名购买商那里更改DNS服务器，这就是原因\n\n常见的DNS记录类型\n\nA指向一个IPV4地址\nAAAA指向一个IPV6地址\nCNAME由一个域名指向另一个域名\nNS(Name Server)就是权威域名服务器\n\nCDN的工作原理如下（重写）\n\n经过前面的一系列操作，你找到了物业（权威域名服务器）\n物业告诉你，要看房型信息，得去问存有房型信息的地方（CDN服务器）\n房型信息给出最近的能看房的地方（CMAKE）\n\n","slug":"个人博客建站教程","date":"2025-10-16T14:46:06.000Z","categories_index":"","tags_index":"tutorial","author_index":"猫冰"},{"id":"04143f6671857c6363a1aa49132f13bd","title":"My_First_Ever_Blog","content":"1.HIHIHI你好吗\n格式尝试#1 : 有关链接\n\n","slug":"blog1","date":"2025-10-15T01:08:50.000Z","categories_index":"","tags_index":"stuffs","author_index":"猫冰"}]