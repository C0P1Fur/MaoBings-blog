{"title":"git分支部分教程","uid":"326c974c2dd33a5c1c93eb6f0ddf6329","slug":"git教程","date":"2025-10-16T14:46:06.000Z","updated":"2025-10-20T13:25:53.362Z","comments":true,"path":"api/articles/git教程.json","keywords":"Catice, 猫冰","cover":null,"content":"<blockquote>\n<p>得先说明，这些东西都是写给我自己看的<br>用于梳理自己的思路，以及之后复习用<br>所以某些地方写的不是很清楚</p>\n</blockquote>\n<h2 id=\"0-git分支特性简介\"><a href=\"#0-git分支特性简介\" class=\"headerlink\" title=\"0.git分支特性简介\"></a>0.git分支特性简介</h2><p>git的分支模型具有轻量的特点，支持在工作流程中频繁地使用分支和合并，这使得它在一众版本控制系统中脱颖而出<br>git保存数据的方式：保存某一时刻的快照</p>\n<h2 id=\"1-git提交对象与分支\"><a href=\"#1-git提交对象与分支\" class=\"headerlink\" title=\"1.git提交对象与分支\"></a>1.git提交对象与分支</h2><h4 id=\"1-1-提交对象概念与新建提交对象\"><a href=\"#1-1-提交对象概念与新建提交对象\" class=\"headerlink\" title=\"1.1 提交对象概念与新建提交对象\"></a>1.1 提交对象概念与新建提交对象</h4><p><code>git add .</code><br><code>git commit -m &quot;some changes&quot;</code></p>\n<p>第一条指令将根目录的文件全部存储在暂存区（可以理解为缓冲区），方便之后的commit提交<br>第二条将指令将暂存区里的文件提交到分支上，这一步，git做了以下的操作：</p>\n<ul>\n<li>blob对象，指向每个提交的文件，保存者该文件的当前快照和哈希值<ul>\n<li>快照，相当于给文件存了个档，记录了当前文件的状态</li>\n<li>哈希值，方便git检测文件是否改变</li>\n</ul>\n</li>\n<li>树对象，指向blob对象的索引，记录着文件结构</li>\n<li>提交对象，指向树对象，同时包含着提交的信息</li>\n</ul>\n<p>上面对象的包含关系呈现如下：</p>\n<ul>\n<li>提交对象<ul>\n<li>树对象<ul>\n<li>blob对象</li>\n<li>blob对象</li>\n<li>blob对象</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>这样，一个提交对象就形成了，不同提交对象之间的关系呈现如下<br>提交对象1 &lt;- 提交对象2 &lt;- 提交对象3</p>\n<h4 id=\"1-2-分支概念与新建分支\"><a href=\"#1-2-分支概念与新建分支\" class=\"headerlink\" title=\"1.2 分支概念与新建分支\"></a>1.2 分支概念与新建分支</h4><p>git的分支，本质上是指向不同提交对象的指针，git的默认分支为master<br>使用<code>git branch demo</code>会在当前提交对象上新建demo分支<br>这样，我们就有两个分支，master与demo，它们都指向同一个提交对象</p>\n<p>那么，两个分支指向同一个提交对象，git是如何确定当前是在那个分支上的呢<br>那就是Head头指针，它没有特殊的含义，只是标识当前位于哪个分支上（可以理解当前的工作路径）</p>\n<p>可以使用<code>git log --oneline --decorate</code>查看分支指向的提交对象</p>\n<h4 id=\"1-3-分支切换\"><a href=\"#1-3-分支切换\" class=\"headerlink\" title=\"1.3 分支切换\"></a>1.3 分支切换</h4><p><code>git checkout demo</code>这条命令将head指针切换到demo分支上<br>此时再新建提交对象，提交对象就会在当前head指针所在的分支上创建<br>同时将head指针移动到新建的对象上</p>\n<h4 id=\"1-4-查看提交对象结构\"><a href=\"#1-4-查看提交对象结构\" class=\"headerlink\" title=\"1.4 查看提交对象结构\"></a>1.4 查看提交对象结构</h4><p><code>git log --oneline --decorate --graph --all</code>显示提交对象的结构，以及各个分支指向的地方</p>\n<h2 id=\"2-git分支的合并\"><a href=\"#2-git分支的合并\" class=\"headerlink\" title=\"2.git分支的合并\"></a>2.git分支的合并</h2><p>git中的分支合并有两种类型</p>\n<h4 id=\"2-1-快进合并\"><a href=\"#2-1-快进合并\" class=\"headerlink\" title=\"2.1 快进合并\"></a>2.1 快进合并</h4><p>如果main分支所在的提交对象是demo分支的父对象<br><code>git checkout main</code><br><code>git merge demo</code><br>git所做的就是直接将main分支移动到demo分支所在的位置</p>\n<h4 id=\"2-2-融合合并\"><a href=\"#2-2-融合合并\" class=\"headerlink\" title=\"2.2 融合合并\"></a>2.2 融合合并</h4><p>main分支不是demo分支的父提交对象<br>此时融合就是将两个提交对象融合到一起，形成一个新的提交对象<br>并且将分支移动到新的提交对象上</p>\n<p>此时，如果两个提交对象的内容有冲突，git就会要求你处理冲突<br>冲突处理完毕后才能真正新建提交对象</p>\n<h2 id=\"3-git分支的管理\"><a href=\"#3-git分支的管理\" class=\"headerlink\" title=\"3.git分支的管理\"></a>3.git分支的管理</h2><h4 id=\"3-1-检查分支状态\"><a href=\"#3-1-检查分支状态\" class=\"headerlink\" title=\"3.1 检查分支状态\"></a>3.1 检查分支状态</h4><p><code>git branch</code>查看当前有哪些分支，可以添加参数-v查看详细内容<br><code>git branch --merged</code>查看与当前分支合并了的分支<br><code>git branch --no-merged</code>查看未与当前分支合并的分支</p>\n<h4 id=\"3-2-常见的分支开发工作流\"><a href=\"#3-2-常见的分支开发工作流\" class=\"headerlink\" title=\"3.2 常见的分支开发工作流\"></a>3.2 常见的分支开发工作流</h4><ul>\n<li>长期分支<ul>\n<li>提交对象实际上应该是线性的</li>\n<li>分为main、develop、top三个分支</li>\n<li>每个分支由一个分支指针控制</li>\n</ul>\n</li>\n<li>主题分支<ul>\n<li>不同的分支由主干分支上生发出来，提交对象是树状的</li>\n<li>可以有多个不同的分支</li>\n</ul>\n</li>\n</ul>\n<p>长期分支和主题分支可以同时进行，可以将长期分支的main、develop、top分支当成主题分支的主干</p>\n<h4 id=\"3-3-远程分支\"><a href=\"#3-3-远程分支\" class=\"headerlink\" title=\"3.3 远程分支\"></a>3.3 远程分支</h4><p>常见交互远程分支的命令</p>\n<ul>\n<li><code>git remote add 远程服务器名 url</code>添加git源，并为其命名</li>\n<li><code>git pull origin main</code>将远程分支拉取到当前分支<ul>\n<li>这条命令相当于<code>git fetch origin main</code>+<code>git merge origin main</code></li>\n<li>先拉取，在融合（解决冲突）</li>\n</ul>\n</li>\n<li><code>git push origin main</code>将当前分支推送到远程分支<ul>\n<li>如果本地与远程分支冲突，会推送失败</li>\n<li>这种情况要先拉取解决冲突，再推送</li>\n</ul>\n</li>\n<li><code>git branch -u origin main</code>将当前分支与远程分支绑定<ul>\n<li>绑定并不会实时跟踪远程分支的状态</li>\n<li>只是起到简化代码的作用，如<code>git push origin main</code>简化为<code>git push</code></li>\n</ul>\n</li>\n<li><code>git checkout -b demo origin/demo</code>在远程分支的地方创建一个本地分支，并将两者绑定<ul>\n<li>捷径：<code>git checkout --track origin/main</code></li>\n<li>或：<code>git checkout main</code>，直接追踪远程得到main分支</li>\n</ul>\n</li>\n<li><code>git push origin --delete main</code>删除一个远程分支</li>\n<li><code>git remote -v</code>查看远程git源列表</li>\n</ul>\n","feature":true,"text":" 得先说明，这些东西都是写给我自己看的用于梳理自己的思路，以及之后复习用所以某些地方写的不是很清楚 0.git分支特性简介git的分支模型具有轻量的特点，支持在...","permalink":"/post/git教程","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"tutorial","slug":"tutorial","count":2,"path":"api/tags/tutorial.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0-git%E5%88%86%E6%94%AF%E7%89%B9%E6%80%A7%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">0.git分支特性简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-git%E6%8F%90%E4%BA%A4%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%88%86%E6%94%AF\"><span class=\"toc-text\">1.git提交对象与分支</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-%E6%8F%90%E4%BA%A4%E5%AF%B9%E8%B1%A1%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%96%B0%E5%BB%BA%E6%8F%90%E4%BA%A4%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">1.1 提交对象概念与新建提交对象</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-%E5%88%86%E6%94%AF%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%96%B0%E5%BB%BA%E5%88%86%E6%94%AF\"><span class=\"toc-text\">1.2 分支概念与新建分支</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-%E5%88%86%E6%94%AF%E5%88%87%E6%8D%A2\"><span class=\"toc-text\">1.3 分支切换</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-4-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%AF%B9%E8%B1%A1%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">1.4 查看提交对象结构</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-git%E5%88%86%E6%94%AF%E7%9A%84%E5%90%88%E5%B9%B6\"><span class=\"toc-text\">2.git分支的合并</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E5%BF%AB%E8%BF%9B%E5%90%88%E5%B9%B6\"><span class=\"toc-text\">2.1 快进合并</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E8%9E%8D%E5%90%88%E5%90%88%E5%B9%B6\"><span class=\"toc-text\">2.2 融合合并</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-git%E5%88%86%E6%94%AF%E7%9A%84%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">3.git分支的管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E6%A3%80%E6%9F%A5%E5%88%86%E6%94%AF%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">3.1 检查分支状态</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C%E6%B5%81\"><span class=\"toc-text\">3.2 常见的分支开发工作流</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF\"><span class=\"toc-text\">3.3 远程分支</span></a></li></ol></li></ol></li></ol>","author":{"name":"猫冰","slug":"blog-author","avatar":"images\\MB-drinking.png","link":"/","description":"小猫用来存博客的地方（也会发一点有趣的东西）","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"images\\bilibili.svg","link":"https://space.bilibili.com/2140016240"}}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"个人博客建站教程","uid":"79fe4e631ac71a379c3a62ac37d71308","slug":"个人博客建站教程","date":"2025-10-16T14:46:06.000Z","updated":"2025-10-20T11:52:36.228Z","comments":true,"path":"api/articles/个人博客建站教程.json","keywords":"Catice, 猫冰","cover":null,"text":" 这是一个建站基础教程，主要是为了熟悉流程，更多需要技术个性化的东西之后再详细学习 索引 准备工作 安装nodejs hexo生成框架 部署上线 修改域名 问题...","permalink":"/post/个人博客建站教程","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"tutorial","slug":"tutorial","count":2,"path":"api/tags/tutorial.json"}],"author":{"name":"猫冰","slug":"blog-author","avatar":"images\\MB-drinking.png","link":"/","description":"小猫用来存博客的地方（也会发一点有趣的东西）","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"images\\bilibili.svg","link":"https://space.bilibili.com/2140016240"}}}},"feature":true}}